name: Go

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Build
      run: go build -race -v ./...

    - name: Test
      run: |
        go test -race -cover -coverprofile ./coverage.out.tmp ./...
        cat ./coverage.out.tmp | grep -v '.pb.go' | grep -v 'mock_' > ./coverage.out
        rm ./coverage.out.tmp

    - name: Coverage
      id: coverage
      run: |
        go tool cover -func ./coverage.out | tee -a coverage.txt
        #export COVERAGE_CONTENT=$(cat coverage.txt)
        echo "COVERAGE_CONTENT<<EOF" >> $GITHUB_ENV
        cat coverage.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - uses: actions/github-script@v4
      if: github.event_name == 'pull_request'
      env:
        COVERAGE_CONTENT: "${{ env.COVERAGE_CONTENT }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `Code Coverage\n
          \`\`\`\n
          ${process.env.COVERAGE_CONTENT}
          \`\`\`

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          const response = await github.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          var comments = response.data;

          console.log(comments);

          if (comments.length > 0) {
            comments = comments.filter(comment => comment.body.includes('Code Coverage') && comment.user.type === 'Bot');
          }

          if (comments.length > 0) {
            const comment = comments.shift();

            github.issues.updateComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: comment.id,
              body: output
            })
          } else {
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.41.1
        skip-pkg-cache: true
